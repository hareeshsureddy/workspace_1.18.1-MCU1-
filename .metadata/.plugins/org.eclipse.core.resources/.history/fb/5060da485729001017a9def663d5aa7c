/*
 * stm32f407xx_gpio_driver.c
 *
 *  Created on: Apr 30, 2025
 *      Author: Hareesh
 */
#include "stm32f407xx_gpio_drive.h"
#include "stm32f407xx.h"
/*GPIO API's */
/*GPIO Peripharal clock control*/
/***********************************************************************
 * @Function name   -GPIO_PeripClkCntr
 *
 * @Brief           -This function Enables or Disables the peripheral clock for the given port
 *
 * @parameter{in]   - Base address of GPIO peripheral
 * @parameter{in]   - Enable or Disable macro
 * @parameter{in]   -
 *
 * @return          -
 *
 * @note			-
 */
void GPIO_PeripClkCntr(GPIOx_RegDef_t *pGPIOx, uint8_t EnorDI){

	if (EnorDI==ENABLE){
		if (pGPIOx==GPIOA)
			GPIOA_PCLK_EN();
		else if (pGPIOx==GPIOB)
			GPIOB_PCLK_EN();
		else if (pGPIOx==GPIOC)
			GPIOC_PCLK_EN();
		else if (pGPIOx==GPIOD)
			GPIOD_PCLK_EN();
		else if (pGPIOx==GPIOE)
			GPIOE_PCLK_EN();
		else if (pGPIOx==GPIOF)
			GPIOF_PCLK_EN();
		else if (pGPIOx==GPIOG)
			GPIOG_PCLK_EN();
		else if (pGPIOx==GPIOH)
			GPIOH_PCLK_EN();
		else if (pGPIOx==GPIOI)
			GPIOI_PCLK_EN();
		else if (pGPIOx==GPIOJ)
			GPIOJ_PCLK_EN();
		else if (pGPIOx==GPIOK)
			GPIOK_PCLK_EN();
	}
	else{
		if (pGPIOx==GPIOA)
			GPIOA_PCLK_DI();
		else if (pGPIOx==GPIOB)
			GPIOB_PCLK_DI();
		else if (pGPIOx==GPIOC)
			GPIOC_PCLK_DI();
		else if (pGPIOx==GPIOD)
			GPIOD_PCLK_DI();
		else if (pGPIOx==GPIOE)
			GPIOE_PCLK_DI();
		else if (pGPIOx==GPIOF)
			GPIOF_PCLK_DI();
		else if (pGPIOx==GPIOG)
			GPIOG_PCLK_DI();
		else if (pGPIOx==GPIOH)
			GPIOH_PCLK_DI();
		else if (pGPIOx==GPIOI)
			GPIOI_PCLK_DI();
		else if (pGPIOx==GPIOJ)
			GPIOJ_PCLK_DI();
		else if (pGPIOx==GPIOK)
			GPIOK_PCLK_DI();
	}
}

void GPIO_PeripClkCntr_Alt(char GPIO_Port, uint8_t EnorDI){
	if (EnorDI==ENABLE)
		GPIOx_PCLK_EN(GPIO_Port-'A');
	else
		GPIOx_PCLK_DI(GPIO_Port-'A');
}
/*GPIO Init and Dinit*/
/***********************************************************************
 * @Function name   -GPIO_Init
 *
 * @Brief           -This function Configures the GPIO pin
 * @parameter{in]   - Base address of GPIO Port which is to configure
 * @parameter{in]   - Configuration parameters of GPIO Pin
 * @parameter{in]   -
 *
 * @return          -
 *
 * @note			-
 */
void GPIO_Init(GPIO_handle_t *pGPIOHandle){
	uint32_t temp=0;	//To store value in the Registers
	//1. Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_confg.GPIO_PinMode<=GPIO_MODE_ANALOG)
	{
		pGPIOHandle->pGPIOx->MODER&=~(0x03<<(2*pGPIOHandle->GPIO_confg.GPIO_PinNumber));  //Clear
		temp=(pGPIOHandle->GPIO_confg.GPIO_PinMode<<(2*pGPIOHandle->GPIO_confg.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->MODER|=temp;
		temp=0;
	}
	else
	{
		//1. Interrupt mode configurations
		if (pGPIOHandle->GPIO_confg.GPIO_PinMode==GPIO_MODE_IT_FT){	//falling edge trigger
			//1. configure the FTSR
			EXTI->EXTI_FTSR|=(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
		//Clear RTSR
		    EXTI->EXTI_RTSR&=~(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
		}
		else if (pGPIOHandle->GPIO_confg.GPIO_PinMode==GPIO_MODE_IT_RT){	//Raising edge trigger
			//1. configure the RTSR
			EXTI->EXTI_RTSR|=(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
		//Clear FTSR
		    EXTI->EXTI_FTSR&=~(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
		}
		else if (pGPIOHandle->GPIO_confg.GPIO_PinMode==GPIO_MODE_IT_FRT) { //Falling & raising edge trigger
			//1. configure the both FTSR & RTSR
			EXTI->EXTI_RTSR|=(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
		//Clear FTSR
		    EXTI->EXTI_FTSR|=(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
		}
			//2. configure the GPIO port selection in the SYSCFG_EXTICR
			/* Enable clock for peripheral SYSCFG*/
			SYSCFG_PCLK_EN();
			uint8_t Reg_index=pGPIOHandle->GPIO_confg.GPIO_PinNumber/4;
			uint8_t Reg_offset=pGPIOHandle->GPIO_confg.GPIO_PinNumber%4;
			uint8_t PortValue=(pGPIOHandle->GPIO_Port-'A');
			/*    or 	*/
			 PortValue= GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
			/*
			if (pGPIOHandle->pGPIOx==GPIOA)
				 PortValue=0;
			else if (pGPIOHandle->pGPIOx==GPIOB)
				 PortValue=1;
			else if (pGPIOHandle->pGPIOx==GPIOC)
				 PortValue=2;
			else if (pGPIOHandle->pGPIOx==GPIOD)
				 PortValue=3;
			else if (pGPIOHandle->pGPIOx==GPIOE)
				 PortValue=4;
			else if (pGPIOHandle->pGPIOx==GPIOF)
				 PortValue=5;
			else if (pGPIOHandle->pGPIOx==GPIOG)
				 PortValue=6;
			else if (pGPIOHandle->pGPIOx==GPIOH)
				 PortValue=7;
			else if (pGPIOHandle->pGPIOx==GPIOI)
				 PortValue=8;
				 */
			SYSCFG->EXTICR[Reg_index]|=(PortValue<<(Reg_offset*4));
			//3. enable the EX TI interrupt delivery using IMR
			EXTI->EXTI_IMR|=(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
	}
	//2. Configure the speed of GPIO pin
	pGPIOHandle->pGPIOx->OSPEEDR&=~(0x03<<((2*pGPIOHandle->GPIO_confg.GPIO_PinNumber))); //clear
	temp=(pGPIOHandle->GPIO_confg.GPIO_PinSpeed<<(2*pGPIOHandle->GPIO_confg.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OSPEEDR|=temp;

	//3. Configure the Output PP or OD of GPIO pin
	pGPIOHandle->pGPIOx->PUPDR&=~(0x03<<(2*pGPIOHandle->GPIO_confg.GPIO_PinNumber));
	temp=(pGPIOHandle->GPIO_confg.GPIO_PinPupdControl<<(2*pGPIOHandle->GPIO_confg.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->PUPDR|=temp;

	//4. Configure the Output Type of GPIO pin
	pGPIOHandle->pGPIOx->OTYPER&=~(1<<(pGPIOHandle->GPIO_confg.GPIO_PinNumber));
	temp=(pGPIOHandle->GPIO_confg.GPIO_PinOPtype<<(pGPIOHandle->GPIO_confg.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OTYPER|=temp;
	//5. Configure the Alternate function of GPIO pin
	if (pGPIOHandle->GPIO_confg.GPIO_PinMode==GPIO_MODE_ALTFN){
		uint8_t index=pGPIOHandle->GPIO_confg.GPIO_PinNumber/8;
		pGPIOHandle->pGPIOx->AFR[index]&=~(0xF<<(4*pGPIOHandle->GPIO_confg.GPIO_PinNumber));
		uint8_t Value=pGPIOHandle->GPIO_confg.GPIO_PinAltFunMode<<(4*pGPIOHandle->GPIO_confg.GPIO_PinNumber);
		pGPIOHandle->pGPIOx->AFR[index]|=Value;
	}
}

void GPIO_Dinit(GPIOx_RegDef_t *pGPIOx){
		if (pGPIOx==GPIOA)
			GPIOA_RESET();
		else if (pGPIOx==GPIOB)
			GPIOB_RESET();
		else if (pGPIOx==GPIOC)
			GPIOC_RESET();
		else if (pGPIOx==GPIOD)
			GPIOD_RESET();
		else if (pGPIOx==GPIOE)
			GPIOE_RESET();
		else if (pGPIOx==GPIOF)
			GPIOF_RESET();
		else if (pGPIOx==GPIOG)
			GPIOG_RESET();
		else if (pGPIOx==GPIOH)
			GPIOH_RESET();
		else if (pGPIOx==GPIOI)
			GPIOI_RESET();
		else if (pGPIOx==GPIOJ)
			GPIOJ_RESET();
		else if (pGPIOx==GPIOK)
		{
			GPIOK_RESET();
		}

}

void GPIO_Dinit_Alt(char GPIO_Port){
	if(GPIO_Port<'L'){
	GPIOx_RESET(GPIO_Port-'A');
	GPIOx_SET(GPIO_Port-'A');
	}
}

/*Data read and write*/
/***********************************************************************
 * @Function name   -GPIO_ReadfromInputPin
 *
 * @Brief           -This function reads the data from GPIO Pin
 *
 * @parameter{in]   - Base address of GPIO Port
 * @parameter{in]   - GPIO Pin number
 * @parameter{in]   -
 *
 * @return          -
 *
 * @note			-
 */
uint8_t GPIO_ReadfromInputPin(GPIOx_RegDef_t *pGPIOx, uint8_t PinNumber){
	// uint8_t read_data=(((pGPIOx->IDR)>>PinNumber) & 0x1);
	// return read_data;
	return (uint8_t)(((pGPIOx->IDR)>>PinNumber) & 0x1);
}
uint16_t GPIO_ReadfromInputPort(GPIOx_RegDef_t *pGPIOx){
	// uint16_t read_data=((pGPIOx->IDR) & 0xFFFF);
	// return read_data;
	return (uint16_t)((pGPIOx->IDR) & 0xFFFF);
}
void GPIO_WritetoOutputPin(GPIOx_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
	 if (Value)
		 pGPIOx->ODR|=(1<<PinNumber);
	 else
		 pGPIOx->ODR&=~(1<<PinNumber);
}
void GPIO_WritetoOutputPort(GPIOx_RegDef_t *pGPIOx,uint16_t Value){
		 pGPIOx->ODR=(Value&0xFFFF);
}

void GPIO_ToggleOutPin(GPIOx_RegDef_t *pGPIOx, uint8_t PinNumber){
		pGPIOx->ODR^=(1<<PinNumber);
}
/*IRQ configurations and ISR handling*/
void GPIO_IRQConfig(uint8_t IRQnumber, uint8_t EnorDi ){
	uint8_t reg_idx=IRQnumber/32;
	uint8_t bit_pos=IRQnumber%32;
	if (EnorDi==ENABLE){
		NVIC_ISER_REG->NVIC_ISER[reg_idx]|=(1<<bit_pos);
	}
	else{
		NVIC_ICER_REG->NVIC_ICER[reg_idx]&=~(1<<bit_pos);
	}

}

void GPIO_IRQPriority_Config(uint8_t IRQnumber, uint8_t Priority){
	/*
	uint8_t reg_idx=IRQnumber/4;
	uint8_t bit_pos=(IRQnumber%4)*8;
	NVIC_IPR_REG->NVIC_IPR[reg_idx]|=(Priority<<bit_pos);
	*/
}
void GPIO_IRQHandling(void);
