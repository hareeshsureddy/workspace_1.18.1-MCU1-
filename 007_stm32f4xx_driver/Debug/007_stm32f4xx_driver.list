
007_stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000688  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000810  08000818  00001818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000810  08000810  00001818  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000810  08000810  00001818  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000810  08000818  00001818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000810  08000810  00001810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000814  08000814  00001814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001818  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000aaa  00000000  00000000  00001842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002cb  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  000025b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000097  00000000  00000000  00002690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001017  00000000  00000000  00002727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001209  00000000  00000000  0000373e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000969f  00000000  00000000  00004947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000dfe6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002d8  00000000  00000000  0000e02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0000e304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080007f8 	.word	0x080007f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080007f8 	.word	0x080007f8

080001c8 <GPIO_PeripClkCntr_Alt>:
		else if (pGPIOx==GPIOK)
			GPIOK_PCLK_DI();
	}
}

void GPIO_PeripClkCntr_Alt(char GPIO_Port, uint8_t EnorDI){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
	if (EnorDI==ENABLE)
 80001d8:	79bb      	ldrb	r3, [r7, #6]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d10b      	bne.n	80001f6 <GPIO_PeripClkCntr_Alt+0x2e>
		GPIOx_PCLK_EN(GPIO_Port-'A');
 80001de:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <GPIO_PeripClkCntr_Alt+0x50>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e2:	79fa      	ldrb	r2, [r7, #7]
 80001e4:	3a41      	subs	r2, #65	@ 0x41
 80001e6:	2101      	movs	r1, #1
 80001e8:	fa01 f202 	lsl.w	r2, r1, r2
 80001ec:	4611      	mov	r1, r2
 80001ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000218 <GPIO_PeripClkCntr_Alt+0x50>)
 80001f0:	430b      	orrs	r3, r1
 80001f2:	6313      	str	r3, [r2, #48]	@ 0x30
	else
		GPIOx_PCLK_DI(GPIO_Port-'A');
}
 80001f4:	e00b      	b.n	800020e <GPIO_PeripClkCntr_Alt+0x46>
		GPIOx_PCLK_DI(GPIO_Port-'A');
 80001f6:	4b08      	ldr	r3, [pc, #32]	@ (8000218 <GPIO_PeripClkCntr_Alt+0x50>)
 80001f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fa:	79fa      	ldrb	r2, [r7, #7]
 80001fc:	3a41      	subs	r2, #65	@ 0x41
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f202 	lsl.w	r2, r1, r2
 8000204:	43d2      	mvns	r2, r2
 8000206:	4611      	mov	r1, r2
 8000208:	4a03      	ldr	r2, [pc, #12]	@ (8000218 <GPIO_PeripClkCntr_Alt+0x50>)
 800020a:	400b      	ands	r3, r1
 800020c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	40020ed8 	.word	0x40020ed8

0800021c <GPIO_Init>:
 *
 * @return          -
 *
 * @note			-
 */
void GPIO_Init(GPIO_handle_t *pGPIOHandle){
 800021c:	b480      	push	{r7}
 800021e:	b087      	sub	sp, #28
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;	//To store value in the Registers
 8000224:	2300      	movs	r3, #0
 8000226:	617b      	str	r3, [r7, #20]
	//1. Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_confg.GPIO_PinMode<=GPIO_MODE_ANALOG)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	795b      	ldrb	r3, [r3, #5]
 800022c:	2b03      	cmp	r3, #3
 800022e:	d822      	bhi.n	8000276 <GPIO_Init+0x5a>
	{
		pGPIOHandle->pGPIOx->MODER&=~(0x03<<(2*pGPIOHandle->GPIO_confg.GPIO_PinNumber));  //Clear
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	005b      	lsls	r3, r3, #1
 800023c:	2103      	movs	r1, #3
 800023e:	fa01 f303 	lsl.w	r3, r1, r3
 8000242:	43db      	mvns	r3, r3
 8000244:	4619      	mov	r1, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	400a      	ands	r2, r1
 800024c:	601a      	str	r2, [r3, #0]
		temp=(pGPIOHandle->GPIO_confg.GPIO_PinMode<<(2*pGPIOHandle->GPIO_confg.GPIO_PinNumber));
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	795b      	ldrb	r3, [r3, #5]
 8000252:	461a      	mov	r2, r3
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	791b      	ldrb	r3, [r3, #4]
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	fa02 f303 	lsl.w	r3, r2, r3
 800025e:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER|=temp;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	6819      	ldr	r1, [r3, #0]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	697a      	ldr	r2, [r7, #20]
 800026c:	430a      	orrs	r2, r1
 800026e:	601a      	str	r2, [r3, #0]
		temp=0;
 8000270:	2300      	movs	r3, #0
 8000272:	617b      	str	r3, [r7, #20]
 8000274:	e0e0      	b.n	8000438 <GPIO_Init+0x21c>
	}
	else
	{
		//1. Interrupt mode configurations
		if (pGPIOHandle->GPIO_confg.GPIO_PinMode==GPIO_MODE_IT_FT){	//falling edge trigger
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	795b      	ldrb	r3, [r3, #5]
 800027a:	2b04      	cmp	r3, #4
 800027c:	d117      	bne.n	80002ae <GPIO_Init+0x92>
			//1. configure the FTSR
			EXTI->EXTI_FTSR|=(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
 800027e:	4b53      	ldr	r3, [pc, #332]	@ (80003cc <GPIO_Init+0x1b0>)
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	7912      	ldrb	r2, [r2, #4]
 8000286:	4611      	mov	r1, r2
 8000288:	2201      	movs	r2, #1
 800028a:	408a      	lsls	r2, r1
 800028c:	4611      	mov	r1, r2
 800028e:	4a4f      	ldr	r2, [pc, #316]	@ (80003cc <GPIO_Init+0x1b0>)
 8000290:	430b      	orrs	r3, r1
 8000292:	60d3      	str	r3, [r2, #12]
		//Clear RTSR
		    EXTI->EXTI_RTSR&=~(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
 8000294:	4b4d      	ldr	r3, [pc, #308]	@ (80003cc <GPIO_Init+0x1b0>)
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	7912      	ldrb	r2, [r2, #4]
 800029c:	4611      	mov	r1, r2
 800029e:	2201      	movs	r2, #1
 80002a0:	408a      	lsls	r2, r1
 80002a2:	43d2      	mvns	r2, r2
 80002a4:	4611      	mov	r1, r2
 80002a6:	4a49      	ldr	r2, [pc, #292]	@ (80003cc <GPIO_Init+0x1b0>)
 80002a8:	400b      	ands	r3, r1
 80002aa:	6093      	str	r3, [r2, #8]
 80002ac:	e035      	b.n	800031a <GPIO_Init+0xfe>
		}
		else if (pGPIOHandle->GPIO_confg.GPIO_PinMode==GPIO_MODE_IT_RT){	//Raising edge trigger
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	795b      	ldrb	r3, [r3, #5]
 80002b2:	2b05      	cmp	r3, #5
 80002b4:	d117      	bne.n	80002e6 <GPIO_Init+0xca>
			//1. configure the RTSR
			EXTI->EXTI_RTSR|=(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
 80002b6:	4b45      	ldr	r3, [pc, #276]	@ (80003cc <GPIO_Init+0x1b0>)
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	7912      	ldrb	r2, [r2, #4]
 80002be:	4611      	mov	r1, r2
 80002c0:	2201      	movs	r2, #1
 80002c2:	408a      	lsls	r2, r1
 80002c4:	4611      	mov	r1, r2
 80002c6:	4a41      	ldr	r2, [pc, #260]	@ (80003cc <GPIO_Init+0x1b0>)
 80002c8:	430b      	orrs	r3, r1
 80002ca:	6093      	str	r3, [r2, #8]
		//Clear FTSR
		    EXTI->EXTI_FTSR&=~(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
 80002cc:	4b3f      	ldr	r3, [pc, #252]	@ (80003cc <GPIO_Init+0x1b0>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	7912      	ldrb	r2, [r2, #4]
 80002d4:	4611      	mov	r1, r2
 80002d6:	2201      	movs	r2, #1
 80002d8:	408a      	lsls	r2, r1
 80002da:	43d2      	mvns	r2, r2
 80002dc:	4611      	mov	r1, r2
 80002de:	4a3b      	ldr	r2, [pc, #236]	@ (80003cc <GPIO_Init+0x1b0>)
 80002e0:	400b      	ands	r3, r1
 80002e2:	60d3      	str	r3, [r2, #12]
 80002e4:	e019      	b.n	800031a <GPIO_Init+0xfe>
		}
		else if (pGPIOHandle->GPIO_confg.GPIO_PinMode==GPIO_MODE_IT_FRT) { //Falling & raising edge trigger
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	795b      	ldrb	r3, [r3, #5]
 80002ea:	2b06      	cmp	r3, #6
 80002ec:	d115      	bne.n	800031a <GPIO_Init+0xfe>
			//1. configure the both FTSR & RTSR
			EXTI->EXTI_RTSR|=(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
 80002ee:	4b37      	ldr	r3, [pc, #220]	@ (80003cc <GPIO_Init+0x1b0>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	687a      	ldr	r2, [r7, #4]
 80002f4:	7912      	ldrb	r2, [r2, #4]
 80002f6:	4611      	mov	r1, r2
 80002f8:	2201      	movs	r2, #1
 80002fa:	408a      	lsls	r2, r1
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a33      	ldr	r2, [pc, #204]	@ (80003cc <GPIO_Init+0x1b0>)
 8000300:	430b      	orrs	r3, r1
 8000302:	6093      	str	r3, [r2, #8]
		//Clear FTSR
		    EXTI->EXTI_FTSR|=(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
 8000304:	4b31      	ldr	r3, [pc, #196]	@ (80003cc <GPIO_Init+0x1b0>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	7912      	ldrb	r2, [r2, #4]
 800030c:	4611      	mov	r1, r2
 800030e:	2201      	movs	r2, #1
 8000310:	408a      	lsls	r2, r1
 8000312:	4611      	mov	r1, r2
 8000314:	4a2d      	ldr	r2, [pc, #180]	@ (80003cc <GPIO_Init+0x1b0>)
 8000316:	430b      	orrs	r3, r1
 8000318:	60d3      	str	r3, [r2, #12]
		}
			//2. configure the GPIO port selection in the SYSCFG_EXTICR
			/* Enable clock for peripheral SYSCFG*/
			SYSCFG_PCLK_EN();
 800031a:	4b2d      	ldr	r3, [pc, #180]	@ (80003d0 <GPIO_Init+0x1b4>)
 800031c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800031e:	4a2c      	ldr	r2, [pc, #176]	@ (80003d0 <GPIO_Init+0x1b4>)
 8000320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000324:	6453      	str	r3, [r2, #68]	@ 0x44
			uint8_t Reg_index=pGPIOHandle->GPIO_confg.GPIO_PinNumber/4;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	089b      	lsrs	r3, r3, #2
 800032c:	74fb      	strb	r3, [r7, #19]
			uint8_t Reg_offset=pGPIOHandle->GPIO_confg.GPIO_PinNumber%4;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	f003 0303 	and.w	r3, r3, #3
 8000336:	74bb      	strb	r3, [r7, #18]
			uint8_t PortValue=(pGPIOHandle->GPIO_Port-'A');
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	7a9b      	ldrb	r3, [r3, #10]
 800033c:	3b41      	subs	r3, #65	@ 0x41
 800033e:	747b      	strb	r3, [r7, #17]
			/*    or 	*/
			 PortValue= GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a23      	ldr	r2, [pc, #140]	@ (80003d4 <GPIO_Init+0x1b8>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d058      	beq.n	80003fc <GPIO_Init+0x1e0>
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a22      	ldr	r2, [pc, #136]	@ (80003d8 <GPIO_Init+0x1bc>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d039      	beq.n	80003c8 <GPIO_Init+0x1ac>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	@ (80003dc <GPIO_Init+0x1c0>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d032      	beq.n	80003c4 <GPIO_Init+0x1a8>
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a1f      	ldr	r2, [pc, #124]	@ (80003e0 <GPIO_Init+0x1c4>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d02b      	beq.n	80003c0 <GPIO_Init+0x1a4>
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a1d      	ldr	r2, [pc, #116]	@ (80003e4 <GPIO_Init+0x1c8>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d024      	beq.n	80003bc <GPIO_Init+0x1a0>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4a1c      	ldr	r2, [pc, #112]	@ (80003e8 <GPIO_Init+0x1cc>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d01d      	beq.n	80003b8 <GPIO_Init+0x19c>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a1a      	ldr	r2, [pc, #104]	@ (80003ec <GPIO_Init+0x1d0>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d016      	beq.n	80003b4 <GPIO_Init+0x198>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a19      	ldr	r2, [pc, #100]	@ (80003f0 <GPIO_Init+0x1d4>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d00f      	beq.n	80003b0 <GPIO_Init+0x194>
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a17      	ldr	r2, [pc, #92]	@ (80003f4 <GPIO_Init+0x1d8>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d008      	beq.n	80003ac <GPIO_Init+0x190>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a16      	ldr	r2, [pc, #88]	@ (80003f8 <GPIO_Init+0x1dc>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d101      	bne.n	80003a8 <GPIO_Init+0x18c>
 80003a4:	2309      	movs	r3, #9
 80003a6:	e02a      	b.n	80003fe <GPIO_Init+0x1e2>
 80003a8:	230a      	movs	r3, #10
 80003aa:	e028      	b.n	80003fe <GPIO_Init+0x1e2>
 80003ac:	2308      	movs	r3, #8
 80003ae:	e026      	b.n	80003fe <GPIO_Init+0x1e2>
 80003b0:	2307      	movs	r3, #7
 80003b2:	e024      	b.n	80003fe <GPIO_Init+0x1e2>
 80003b4:	2306      	movs	r3, #6
 80003b6:	e022      	b.n	80003fe <GPIO_Init+0x1e2>
 80003b8:	2305      	movs	r3, #5
 80003ba:	e020      	b.n	80003fe <GPIO_Init+0x1e2>
 80003bc:	2304      	movs	r3, #4
 80003be:	e01e      	b.n	80003fe <GPIO_Init+0x1e2>
 80003c0:	2303      	movs	r3, #3
 80003c2:	e01c      	b.n	80003fe <GPIO_Init+0x1e2>
 80003c4:	2302      	movs	r3, #2
 80003c6:	e01a      	b.n	80003fe <GPIO_Init+0x1e2>
 80003c8:	2301      	movs	r3, #1
 80003ca:	e018      	b.n	80003fe <GPIO_Init+0x1e2>
 80003cc:	40013c00 	.word	0x40013c00
 80003d0:	40020ed8 	.word	0x40020ed8
 80003d4:	40020000 	.word	0x40020000
 80003d8:	40020400 	.word	0x40020400
 80003dc:	40020800 	.word	0x40020800
 80003e0:	40020c00 	.word	0x40020c00
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40021400 	.word	0x40021400
 80003ec:	40021800 	.word	0x40021800
 80003f0:	40021c00 	.word	0x40021c00
 80003f4:	40022000 	.word	0x40022000
 80003f8:	40022400 	.word	0x40022400
 80003fc:	2300      	movs	r3, #0
 80003fe:	747b      	strb	r3, [r7, #17]
			else if (pGPIOHandle->pGPIOx==GPIOH)
				 PortValue=7;
			else if (pGPIOHandle->pGPIOx==GPIOI)
				 PortValue=8;
				 */
			SYSCFG->EXTICR[Reg_index]|=(PortValue<<(Reg_offset*4));
 8000400:	4a5b      	ldr	r2, [pc, #364]	@ (8000570 <GPIO_Init+0x354>)
 8000402:	7cfb      	ldrb	r3, [r7, #19]
 8000404:	3302      	adds	r3, #2
 8000406:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800040a:	7c79      	ldrb	r1, [r7, #17]
 800040c:	7cbb      	ldrb	r3, [r7, #18]
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	fa01 f303 	lsl.w	r3, r1, r3
 8000414:	4618      	mov	r0, r3
 8000416:	4956      	ldr	r1, [pc, #344]	@ (8000570 <GPIO_Init+0x354>)
 8000418:	7cfb      	ldrb	r3, [r7, #19]
 800041a:	4302      	orrs	r2, r0
 800041c:	3302      	adds	r3, #2
 800041e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			//3. enable the EX TI interrupt delivery using IMR
			EXTI->EXTI_IMR|=(1<<pGPIOHandle->GPIO_confg.GPIO_PinNumber);
 8000422:	4b54      	ldr	r3, [pc, #336]	@ (8000574 <GPIO_Init+0x358>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	7912      	ldrb	r2, [r2, #4]
 800042a:	4611      	mov	r1, r2
 800042c:	2201      	movs	r2, #1
 800042e:	408a      	lsls	r2, r1
 8000430:	4611      	mov	r1, r2
 8000432:	4a50      	ldr	r2, [pc, #320]	@ (8000574 <GPIO_Init+0x358>)
 8000434:	430b      	orrs	r3, r1
 8000436:	6013      	str	r3, [r2, #0]
	}
	//2. Configure the speed of GPIO pin
	pGPIOHandle->pGPIOx->OSPEEDR&=~(0x03<<((2*pGPIOHandle->GPIO_confg.GPIO_PinNumber))); //clear
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	689a      	ldr	r2, [r3, #8]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	2103      	movs	r1, #3
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	43db      	mvns	r3, r3
 800044c:	4619      	mov	r1, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	400a      	ands	r2, r1
 8000454:	609a      	str	r2, [r3, #8]
	temp=(pGPIOHandle->GPIO_confg.GPIO_PinSpeed<<(2*pGPIOHandle->GPIO_confg.GPIO_PinNumber));
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	799b      	ldrb	r3, [r3, #6]
 800045a:	461a      	mov	r2, r3
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	fa02 f303 	lsl.w	r3, r2, r3
 8000466:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR|=temp;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	6899      	ldr	r1, [r3, #8]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	697a      	ldr	r2, [r7, #20]
 8000474:	430a      	orrs	r2, r1
 8000476:	609a      	str	r2, [r3, #8]

	//3. Configure the Output PP or OD of GPIO pin
	pGPIOHandle->pGPIOx->PUPDR&=~(0x03<<(2*pGPIOHandle->GPIO_confg.GPIO_PinNumber));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	68da      	ldr	r2, [r3, #12]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	791b      	ldrb	r3, [r3, #4]
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	2103      	movs	r1, #3
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	43db      	mvns	r3, r3
 800048c:	4619      	mov	r1, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	400a      	ands	r2, r1
 8000494:	60da      	str	r2, [r3, #12]
	temp=(pGPIOHandle->GPIO_confg.GPIO_PinPupdControl<<(2*pGPIOHandle->GPIO_confg.GPIO_PinNumber));
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	79db      	ldrb	r3, [r3, #7]
 800049a:	461a      	mov	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR|=temp;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	68d9      	ldr	r1, [r3, #12]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	697a      	ldr	r2, [r7, #20]
 80004b4:	430a      	orrs	r2, r1
 80004b6:	60da      	str	r2, [r3, #12]

	//4. Configure the Output Type of GPIO pin
	if (pGPIOHandle->GPIO_confg.GPIO_PinMode==GPIO_MODE_OUT){
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	795b      	ldrb	r3, [r3, #5]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d11d      	bne.n	80004fc <GPIO_Init+0x2e0>
		//Pin output type configure only if pin is output mode
	pGPIOHandle->pGPIOx->OTYPER&=~(1<<(pGPIOHandle->GPIO_confg.GPIO_PinNumber));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	685a      	ldr	r2, [r3, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	791b      	ldrb	r3, [r3, #4]
 80004ca:	4619      	mov	r1, r3
 80004cc:	2301      	movs	r3, #1
 80004ce:	408b      	lsls	r3, r1
 80004d0:	43db      	mvns	r3, r3
 80004d2:	4619      	mov	r1, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	400a      	ands	r2, r1
 80004da:	605a      	str	r2, [r3, #4]
	temp=(pGPIOHandle->GPIO_confg.GPIO_PinOPtype<<(pGPIOHandle->GPIO_confg.GPIO_PinNumber));
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	7a1b      	ldrb	r3, [r3, #8]
 80004e0:	461a      	mov	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	791b      	ldrb	r3, [r3, #4]
 80004e6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ea:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER|=temp;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	6859      	ldr	r1, [r3, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	697a      	ldr	r2, [r7, #20]
 80004f8:	430a      	orrs	r2, r1
 80004fa:	605a      	str	r2, [r3, #4]
	}
	//5. Configure the Alternate function of GPIO pin
	if (pGPIOHandle->GPIO_confg.GPIO_PinMode==GPIO_MODE_ALTFN){
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d12f      	bne.n	8000564 <GPIO_Init+0x348>
		uint8_t index=pGPIOHandle->GPIO_confg.GPIO_PinNumber/8;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	08db      	lsrs	r3, r3, #3
 800050a:	743b      	strb	r3, [r7, #16]
		pGPIOHandle->pGPIOx->AFR[index]&=~(0xF<<(4*pGPIOHandle->GPIO_confg.GPIO_PinNumber));
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	7c3a      	ldrb	r2, [r7, #16]
 8000512:	3208      	adds	r2, #8
 8000514:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	220f      	movs	r2, #15
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	43db      	mvns	r3, r3
 8000526:	4618      	mov	r0, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	7c3a      	ldrb	r2, [r7, #16]
 800052e:	4001      	ands	r1, r0
 8000530:	3208      	adds	r2, #8
 8000532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		uint8_t Value=pGPIOHandle->GPIO_confg.GPIO_PinAltFunMode<<(4*pGPIOHandle->GPIO_confg.GPIO_PinNumber);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	7a5b      	ldrb	r3, [r3, #9]
 800053a:	461a      	mov	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	791b      	ldrb	r3, [r3, #4]
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[index]|=Value;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	7c3a      	ldrb	r2, [r7, #16]
 800054e:	3208      	adds	r2, #8
 8000550:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000554:	7bf9      	ldrb	r1, [r7, #15]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	7c3a      	ldrb	r2, [r7, #16]
 800055c:	4301      	orrs	r1, r0
 800055e:	3208      	adds	r2, #8
 8000560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000564:	bf00      	nop
 8000566:	371c      	adds	r7, #28
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40013800 	.word	0x40013800
 8000574:	40013c00 	.word	0x40013c00

08000578 <GPIO_ToggleOutPin>:
}
void GPIO_WritetoOutputPort(GPIOx_RegDef_t *pGPIOx,uint16_t Value){
		 pGPIOx->ODR=(Value&0xFFFF);
}

void GPIO_ToggleOutPin(GPIOx_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
		pGPIOx->ODR^=(1<<PinNumber);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	78fa      	ldrb	r2, [r7, #3]
 800058a:	2101      	movs	r1, #1
 800058c:	fa01 f202 	lsl.w	r2, r1, r2
 8000590:	405a      	eors	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	615a      	str	r2, [r3, #20]
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <GPIO_IRQConfig>:
/*IRQ configurations and ISR handling*/
void GPIO_IRQConfig(uint8_t IRQnumber, uint8_t EnorDi ){
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	460a      	mov	r2, r1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]
	uint8_t reg_idx=IRQnumber/32;
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	095b      	lsrs	r3, r3, #5
 80005b4:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_pos=IRQnumber%32;
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f003 031f 	and.w	r3, r3, #31
 80005bc:	73bb      	strb	r3, [r7, #14]
	if (EnorDi==ENABLE){
 80005be:	79bb      	ldrb	r3, [r7, #6]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d10e      	bne.n	80005e2 <GPIO_IRQConfig+0x42>
		NVIC_ISER_REG->NVIC_ISER[reg_idx]|=(1<<bit_pos);
 80005c4:	4a11      	ldr	r2, [pc, #68]	@ (800060c <GPIO_IRQConfig+0x6c>)
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005cc:	7bbb      	ldrb	r3, [r7, #14]
 80005ce:	2101      	movs	r1, #1
 80005d0:	fa01 f303 	lsl.w	r3, r1, r3
 80005d4:	4618      	mov	r0, r3
 80005d6:	490d      	ldr	r1, [pc, #52]	@ (800060c <GPIO_IRQConfig+0x6c>)
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	4302      	orrs	r2, r0
 80005dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	else{
		NVIC_ICER_REG->NVIC_ICER[reg_idx]&=~(1<<bit_pos);
	}

}
 80005e0:	e00e      	b.n	8000600 <GPIO_IRQConfig+0x60>
		NVIC_ICER_REG->NVIC_ICER[reg_idx]&=~(1<<bit_pos);
 80005e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000610 <GPIO_IRQConfig+0x70>)
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	2101      	movs	r1, #1
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	4906      	ldr	r1, [pc, #24]	@ (8000610 <GPIO_IRQConfig+0x70>)
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	4002      	ands	r2, r0
 80005fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000e100 	.word	0xe000e100
 8000610:	e000e180 	.word	0xe000e180

08000614 <GPIO_IRQPriority_Config>:

void GPIO_IRQPriority_Config(uint8_t IRQnumber, uint32_t Priority){
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	71fb      	strb	r3, [r7, #7]

	uint8_t reg_idx=IRQnumber/4;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_pos=(IRQnumber%4)*8;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f003 0303 	and.w	r3, r3, #3
 800062c:	b2db      	uxtb	r3, r3
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	73bb      	strb	r3, [r7, #14]
	/*
	NVIC_IPR_REG->NVIC_IPR[reg_idx]|=(Priority<<bit_pos);
	*/
	uint8_t Shift_bits=(bit_pos)+(8-NO_BITS_IMPLEMENTED);
 8000632:	7bbb      	ldrb	r3, [r7, #14]
 8000634:	3304      	adds	r3, #4
 8000636:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_REG_BASEADDR+(reg_idx))|=(Priority<<Shift_bits);
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000640:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000644:	6819      	ldr	r1, [r3, #0]
 8000646:	7b7b      	ldrb	r3, [r7, #13]
 8000648:	683a      	ldr	r2, [r7, #0]
 800064a:	409a      	lsls	r2, r3
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000654:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000658:	430a      	orrs	r2, r1
 800065a:	601a      	str	r2, [r3, #0]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
	...

08000668 <GPIO_IRQHandling>:
void GPIO_IRQHandling(uint8_t PinNumber){
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	//Clear the pending interrupt
	if(EXTI->EXTI_PR&(1<<PinNumber)){
 8000672:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <GPIO_IRQHandling+0x3c>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	79fa      	ldrb	r2, [r7, #7]
 8000678:	2101      	movs	r1, #1
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	4013      	ands	r3, r2
 8000680:	2b00      	cmp	r3, #0
 8000682:	d009      	beq.n	8000698 <GPIO_IRQHandling+0x30>
		EXTI->EXTI_PR|=(1<<PinNumber);
 8000684:	4b07      	ldr	r3, [pc, #28]	@ (80006a4 <GPIO_IRQHandling+0x3c>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	79fa      	ldrb	r2, [r7, #7]
 800068a:	2101      	movs	r1, #1
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	4611      	mov	r1, r2
 8000692:	4a04      	ldr	r2, [pc, #16]	@ (80006a4 <GPIO_IRQHandling+0x3c>)
 8000694:	430b      	orrs	r3, r1
 8000696:	6153      	str	r3, [r2, #20]
	}
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40013c00 	.word	0x40013c00

080006a8 <main>:
#include "stm32f407xx_gpio_drive.h"
void delay(){
for (int i=0;i<500000;i++);
}
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
    /* Loop forever */
	/*Configure the Pin 14 in a GPIOA, with output and Push pull */
	GPIO_handle_t GPIO_Congig_data;
	memset(&GPIO_Congig_data,0,sizeof(GPIO_Congig_data));		//To clear the structure members
 80006ae:	463b      	mov	r3, r7
 80006b0:	220c      	movs	r2, #12
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f872 	bl	800079e <memset>
	GPIO_Congig_data.GPIO_confg.GPIO_PinNumber=GPIO_PIN_14;
 80006ba:	230e      	movs	r3, #14
 80006bc:	713b      	strb	r3, [r7, #4]
	GPIO_Congig_data.GPIO_confg.GPIO_PinMode=GPIO_MODE_OUT;
 80006be:	2301      	movs	r3, #1
 80006c0:	717b      	strb	r3, [r7, #5]
	GPIO_Congig_data.GPIO_confg.GPIO_PinSpeed=GPIO_SPEED_V_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	71bb      	strb	r3, [r7, #6]
	GPIO_Congig_data.GPIO_confg.GPIO_PinPupdControl=GPIO_NO_PUPD;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71fb      	strb	r3, [r7, #7]
	GPIO_Congig_data.GPIO_confg.GPIO_PinOPtype=GPIO_OUTTYPE_PP; /*Push pull configuration*/
 80006ca:	2300      	movs	r3, #0
 80006cc:	723b      	strb	r3, [r7, #8]
	//GPIO_Congig_data.GPIO_confg.GPIO_PinOPtype=GPIO_OUTTYPE_OD; /*Open drain configuration*/
	GPIO_Congig_data.pGPIOx=GPIOA;
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <main+0x80>)
 80006d0:	603b      	str	r3, [r7, #0]
	GPIO_handle_t *pGPIOx_handle=&GPIO_Congig_data;
 80006d2:	463b      	mov	r3, r7
 80006d4:	60fb      	str	r3, [r7, #12]
	/*Enable GPIOA Peripheral clock*/
	GPIO_PeripClkCntr_Alt('A',ENABLE);
 80006d6:	2101      	movs	r1, #1
 80006d8:	2041      	movs	r0, #65	@ 0x41
 80006da:	f7ff fd75 	bl	80001c8 <GPIO_PeripClkCntr_Alt>
	GPIO_Init(pGPIOx_handle);
 80006de:	68f8      	ldr	r0, [r7, #12]
 80006e0:	f7ff fd9c 	bl	800021c <GPIO_Init>
	/*Configure the Pin 5 in a GPIOD, with input mode and internal pull down*/
	memset(&GPIO_Congig_data,0,sizeof(GPIO_Congig_data));		//To clear the structure members
 80006e4:	463b      	mov	r3, r7
 80006e6:	220c      	movs	r2, #12
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f857 	bl	800079e <memset>
	GPIO_Congig_data.GPIO_confg.GPIO_PinNumber=GPIO_PIN_5;		//PD5
 80006f0:	2305      	movs	r3, #5
 80006f2:	713b      	strb	r3, [r7, #4]
	GPIO_Congig_data.GPIO_confg.GPIO_PinMode=GPIO_MODE_IT_FT;
 80006f4:	2304      	movs	r3, #4
 80006f6:	717b      	strb	r3, [r7, #5]
	GPIO_Congig_data.GPIO_confg.GPIO_PinSpeed=GPIO_SPEED_V_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	71bb      	strb	r3, [r7, #6]
	GPIO_Congig_data.GPIO_confg.GPIO_PinPupdControl=GPIO_PU;	/*External PD is there */
 80006fc:	2301      	movs	r3, #1
 80006fe:	71fb      	strb	r3, [r7, #7]
	GPIO_Congig_data.pGPIOx=GPIOD;
 8000700:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <main+0x84>)
 8000702:	603b      	str	r3, [r7, #0]
	GPIO_PeripClkCntr_Alt('D',ENABLE);		//GPIOD peripheral clock enable
 8000704:	2101      	movs	r1, #1
 8000706:	2044      	movs	r0, #68	@ 0x44
 8000708:	f7ff fd5e 	bl	80001c8 <GPIO_PeripClkCntr_Alt>
	GPIO_Init(pGPIOx_handle);
 800070c:	68f8      	ldr	r0, [r7, #12]
 800070e:	f7ff fd85 	bl	800021c <GPIO_Init>
	GPIO_IRQPriority_Config(EXTI_5TO9,NVIC_IRQ_PR_4);
 8000712:	2104      	movs	r1, #4
 8000714:	2017      	movs	r0, #23
 8000716:	f7ff ff7d 	bl	8000614 <GPIO_IRQPriority_Config>
	GPIO_IRQConfig(EXTI_5TO9,ENABLE);
 800071a:	2101      	movs	r1, #1
 800071c:	2017      	movs	r0, #23
 800071e:	f7ff ff3f 	bl	80005a0 <GPIO_IRQConfig>
	while(1);
 8000722:	bf00      	nop
 8000724:	e7fd      	b.n	8000722 <main+0x7a>
 8000726:	bf00      	nop
 8000728:	40020000 	.word	0x40020000
 800072c:	40020c00 	.word	0x40020c00

08000730 <EXTI0_IRQHandler>:

}

void EXTI0_IRQHandler(void){
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	//handle the interrupt
	GPIO_IRQHandling(GPIO_PIN_5);
 8000734:	2005      	movs	r0, #5
 8000736:	f7ff ff97 	bl	8000668 <GPIO_IRQHandling>
	//On GPIO interrupt toggle LED
	GPIO_ToggleOutPin(GPIOA,GPIO_PIN_14);
 800073a:	210e      	movs	r1, #14
 800073c:	4802      	ldr	r0, [pc, #8]	@ (8000748 <EXTI0_IRQHandler+0x18>)
 800073e:	f7ff ff1b 	bl	8000578 <GPIO_ToggleOutPin>
	}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40020000 	.word	0x40020000

0800074c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000750:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <LoopForever+0x6>)
  ldr r1, =_edata
 8000756:	490d      	ldr	r1, [pc, #52]	@ (800078c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000758:	4a0d      	ldr	r2, [pc, #52]	@ (8000790 <LoopForever+0xe>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0a      	ldr	r2, [pc, #40]	@ (8000794 <LoopForever+0x12>)
  ldr r4, =_ebss
 800076c:	4c0a      	ldr	r4, [pc, #40]	@ (8000798 <LoopForever+0x16>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800077a:	f000 f819 	bl	80007b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff ff93 	bl	80006a8 <main>

08000782 <LoopForever>:

LoopForever:
  b LoopForever
 8000782:	e7fe      	b.n	8000782 <LoopForever>
  ldr   r0, =_estack
 8000784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000790:	08000818 	.word	0x08000818
  ldr r2, =_sbss
 8000794:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000798:	2000001c 	.word	0x2000001c

0800079c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC_IRQHandler>

0800079e <memset>:
 800079e:	4402      	add	r2, r0
 80007a0:	4603      	mov	r3, r0
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d100      	bne.n	80007a8 <memset+0xa>
 80007a6:	4770      	bx	lr
 80007a8:	f803 1b01 	strb.w	r1, [r3], #1
 80007ac:	e7f9      	b.n	80007a2 <memset+0x4>
	...

080007b0 <__libc_init_array>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	4d0d      	ldr	r5, [pc, #52]	@ (80007e8 <__libc_init_array+0x38>)
 80007b4:	4c0d      	ldr	r4, [pc, #52]	@ (80007ec <__libc_init_array+0x3c>)
 80007b6:	1b64      	subs	r4, r4, r5
 80007b8:	10a4      	asrs	r4, r4, #2
 80007ba:	2600      	movs	r6, #0
 80007bc:	42a6      	cmp	r6, r4
 80007be:	d109      	bne.n	80007d4 <__libc_init_array+0x24>
 80007c0:	4d0b      	ldr	r5, [pc, #44]	@ (80007f0 <__libc_init_array+0x40>)
 80007c2:	4c0c      	ldr	r4, [pc, #48]	@ (80007f4 <__libc_init_array+0x44>)
 80007c4:	f000 f818 	bl	80007f8 <_init>
 80007c8:	1b64      	subs	r4, r4, r5
 80007ca:	10a4      	asrs	r4, r4, #2
 80007cc:	2600      	movs	r6, #0
 80007ce:	42a6      	cmp	r6, r4
 80007d0:	d105      	bne.n	80007de <__libc_init_array+0x2e>
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d8:	4798      	blx	r3
 80007da:	3601      	adds	r6, #1
 80007dc:	e7ee      	b.n	80007bc <__libc_init_array+0xc>
 80007de:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e2:	4798      	blx	r3
 80007e4:	3601      	adds	r6, #1
 80007e6:	e7f2      	b.n	80007ce <__libc_init_array+0x1e>
 80007e8:	08000810 	.word	0x08000810
 80007ec:	08000810 	.word	0x08000810
 80007f0:	08000810 	.word	0x08000810
 80007f4:	08000814 	.word	0x08000814

080007f8 <_init>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	bf00      	nop
 80007fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fe:	bc08      	pop	{r3}
 8000800:	469e      	mov	lr, r3
 8000802:	4770      	bx	lr

08000804 <_fini>:
 8000804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000806:	bf00      	nop
 8000808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800080a:	bc08      	pop	{r3}
 800080c:	469e      	mov	lr, r3
 800080e:	4770      	bx	lr
